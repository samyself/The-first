#include<REGX52.H>

#define uint unsigned int
#define uchar unsigned char
#define Speak P2_4  //定义蜂鸣器
#define LED1 P2_5   //秒钟显示灯
#define LED2 P2_6  //闹钟指示灯
#define LED3 P2_7   //整点报时指示灯
#define Key1 P1_0   //调整显示时间（1：调整时；2：调整分；3：调整秒）
#define Key2 P1_1   //加按键
#define Key3 P1_2   //减按键
#define Key4 P1_3   //显示、调整闹钟（1：显示闹钟时间；2：调整闹钟时；3：调整闹钟分；）
#define Key5 P1_4   //开启/关闭闹钟（默认关闭）
#define Key6 P1_5   //开启/关闭整点报时（默认关闭）
#define Key7 P1_6   //开启/关闭日期
#define Key8 P1_7   //开启/关闭秒表

sbit DU = P2^0;//数码管段选
sbit WE = P2^1;//数码管位选

uchar code Data[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90,0xBF};   //没有小数点0~9
uchar code Data1[]={0x40,0x79,0x24,0x30,0x19,0x12,0x02,0x78,0x00,0x10,0x3F};  //有小数点0~9


uchar year=20,month=5,day=31,hour=23,min=59,sec=40;   //定义初始显示时间
uchar hour1=0,min1=1,sec1=20; //定义初始闹钟
char num=0;                   //计数。。。20num=1s
uint t=2;                     //动态延时时间基数
uchar flag=0;                 //显示标志位（0：走时1：调整时钟2:调整分钟）
uchar hour2=0,min2=0,sec2=20;  //秒表时间设置

uint i=0;j=0;                  
bit nao_z=0;//闹钟标志位（0：关闭闹钟1：显示闹钟）
uchar flag_nao_z=0; //闹钟显示模式（0：显示正常走时 1：显示闹钟时间 2：调整闹钟时钟 3：调整闹钟分钟）
bit bao_shi=0;        //整点报时标志位（0：不允许报时 1：允许报时）
bit ri_qi=0;   //日期显示标志位（0：显示正常走时1：显示日期）
uchar miao_biao=0;   //秒表标志位（0：显示正常走时1：开启秒表）

void delay(uint time)  //扫描延时函数
{
	uint x,y; 
	for(x=time;x>0;x--)
	for(y=110;y>0;y--);
}


void delay_fmq(uint time)  //蜂鸣器延时函数
	{
		uint x,y;
		for(x=time;x>0;x--)
		for(y=5;y>0;y--);
	}
	
	
	void fmq()    // 蜂鸣器函数
	{
		for(i=0;i<100;i++)
		{
			Speak=0;
			delay_fmq(10);
		}
			Speak=1;
	}
	
	
	void Time0_init()   //定时器0初始化函数
	{
		TMOD=0x01;   //定时器0位方式一
		TL0=(65536-50000)%256;  //定时时间为50ms
		TH0=(65536-50000)%256;
		ET0=1;  //开定时器0中断
		EA=1;   //开总中断
		TR0=0;  //关闭定时器0
	}
	
	
	void Time0() interrupt 1 //中断函数
	{
		TH0=(65536-50000)/256;
		TL0=(65536-50000)%256;
		num++;
		if(num>=5)        //设定1s
			{
				num=0;
				sec++;
				if(flag_nao_z!=0)  //闹钟模式显示不为0（不显示走时）
				{
					LED1=~LED1;   //LED1闪烁
				}
				else  //显示走时
				{
					LED1=1;     //指示灯不亮
				}
				if(nao_z==1)  //闹钟标志位为1（闹钟开启）
				{
					LED2=0;
					if(hour==hour1&&min==min1)
					{
						Speak=~Speak;    //会响1分钟
					}
					else 
					{
						Speak=1;
					}
				}
				else   //闹钟关闭
				{
					LED2=1;
				}
				
		if(sec==60)
		{
			min++;
			sec=0;
		if(min==60)
		{
			hour++;
			min=0;
		if(hour==24)
		{
			day++;
			hour=0;
		if(month==1||month==3||month==5||month==7||month==8||month==10||month==12)
		{
			if(day>31)
		{
			month++;
			day=1;
		}
	}
		else
		{
			if(day>30)
		{
			month++;
			day=1;
		}
	}	
		if(month>12)
		{
			year++;
			month=1;
		}
	}
}
		}
	}
}
	
	
	
	void disp(hour,min,sec)   //数码管正常显示模式（全部显示）
	{
	//第一位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[hour/10];//
	DU = 0;//锁存段选数据
	delay(5);
  //第二位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFD; //1111 1101
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[hour%10];//
	DU = 0;//锁存段选数据
	delay(5);
	//第三位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFB; //1111 1011
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[min/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第四位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XF7; //1111 0111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[min%10];//
	DU = 0;//锁存段选数据
	delay(5);
//第五位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XEF; //1110 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[sec/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第六位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XDF; //1101 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[sec%10];//
	DU = 0;//锁存段选数据
	delay(5);
	}
	
	void disp1(hour,min,sec)  //调小时模式
	{
		j++;
		while(j==40)
		{
			j=0;
		}
		if(j<20)  //j<20全显示
		{
//第一位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[hour/10];//
	DU = 0;//锁存段选数据
	delay(5);
  //第二位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFD; //1111 1101
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[hour%10];//
	DU = 0;//锁存段选数据
	delay(5);
	//第三位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFB; //1111 1011
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[min/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第四位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XF7; //1111 0111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[min%10];//
	DU = 0;//锁存段选数据
	delay(5);
//第五位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XEF; //1110 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[sec/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第六位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XDF; //1101 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[sec%10];//
	DU = 0;//锁存段选数据
	delay(5);
	}
		
		else    //j>20时不显示
		{
//第一位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFF; //1111 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[hour/10];//
	DU = 0;//锁存段选数据
	delay(5);
  //第二位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFF; //1111 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[hour%10];//
	DU = 0;//锁存段选数据
	delay(5);
	//第三位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFB; //1111 1011
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[min/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第四位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XF7; //1111 0111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[min%10];//
	DU = 0;//锁存段选数据
	delay(5);
//第五位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XEF; //1110 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[sec/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第六位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XDF; //1101 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[sec%10];//
	DU = 0;//锁存段选数据
	delay(5);    
	}
}
	
void disp2(hour,min,sec)  //调分钟模式
	{
			j++;
		while(j==40)
		{
			j=0;
		}
		if(j<20)
		{
//第一位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[hour/10];//
	DU = 0;//锁存段选数据
	delay(5);
  //第二位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFD; //1111 1101
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[hour%10];//
	DU = 0;//锁存段选数据
	delay(5);
	//第三位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFB; //1111 1011
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[min/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第四位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XF7; //1111 0111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[min%10];//
	DU = 0;//锁存段选数据
	delay(5);
//第五位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XEF; //1110 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[sec/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第六位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XDF; //1101 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[sec%10];//
	DU = 0;//锁存段选数据
	delay(5);
	}
		
		else
		{
//第一位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[hour/10];//
	DU = 0;//锁存段选数据
	delay(5);
  //第二位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFD; //1111 1101
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[hour%10];//
	DU = 0;//锁存段选数据
	delay(5);
	//第三位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFF; //1111 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[min/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第四位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFF; //1111 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[min%10];//
	DU = 0;//锁存段选数据
	delay(5);
//第五位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XEF; //1110 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[sec/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第六位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XDF; //1101 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[sec%10];//
	DU = 0;//锁存段选数据
	delay(5);
	}
}
void disp3(hour1,min1,sec1) //显示闹钟时间
	{
//第一位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[hour1/10];//
	DU = 0;//锁存段选数据
	delay(5);
  //第二位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFD; //1111 1101
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[hour1%10];//
	DU = 0;//锁存段选数据
	delay(5);
	//第三位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFB; //1111 1011
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[min1/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第四位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XF7; //1111 0111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[min1%10];//
	DU = 0;//锁存段选数据
	delay(5);
//第五位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XEF; //1110 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[sec1/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第六位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XDF; //1101 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[sec1%10];//
	DU = 0;//锁存段选数据
	delay(5);
	}
	
	
	void disp4(hour1,min1,sec1)//闹钟调小时模式
	{
			j++;
		while(j==40)
		{
			j=0;
		}
		if(j<20)
		{
//第一位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[hour1/10];//
	DU = 0;//锁存段选数据
	delay(5);
  //第二位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFD; //1111 1101
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[hour1%10];//
	DU = 0;//锁存段选数据
	delay(5);
	//第三位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFB; //1111 1011
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[min1/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第四位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XF7; //1111 0111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[min1%10];//
	DU = 0;//锁存段选数据
	delay(5);
//第五位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XEF; //1110 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[sec1/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第六位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XDF; //1101 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[sec1%10];//
	DU = 0;//锁存段选数据
	delay(5);
	}
		else
		{
//第一位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFF; //1111 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[hour1/10];//
	DU = 0;//锁存段选数据
	delay(5);
  //第二位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFF; //1111 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[hour1%10];//
	DU = 0;//锁存段选数据
	delay(5);
	//第三位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFB; //1111 1011
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[min1/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第四位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XF7; //1111 0111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[min1%10];//
	DU = 0;//锁存段选数据
	delay(5);
//第五位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XEF; //1110 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[sec1/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第六位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XDF; //1101 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[sec1%10];//
	DU = 0;//锁存段选数据
	delay(5);
	}
}
		void disp5(hour1,min1,sec1) //闹钟调分钟模式
	{
			j++;
		while(j==40)
		{
			j=0;
		}
		if(j<20)
		{
//第一位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[hour1/10];//
	DU = 0;//锁存段选数据
	delay(5);
  //第二位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFD; //1111 1101
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[hour1%10];//
	DU = 0;//锁存段选数据
	delay(5);
	//第三位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFB; //1111 1011
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[min1/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第四位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XF7; //1111 0111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[min1%10];//
	DU = 0;//锁存段选数据
	delay(5);
//第五位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XEF; //1110 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[sec1/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第六位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XDF; //1101 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[sec1%10];//
	DU = 0;//锁存段选数据
	delay(5);
	}
		else
		{
//第一位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[hour1/10];//
	DU = 0;//锁存段选数据
	delay(5);
  //第二位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFD; //1111 1101
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[hour1%10];//
	DU = 0;//锁存段选数据
	delay(5);
	//第三位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFF; //1111 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[min1/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第四位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFF; //1111 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[min1%10];//
	DU = 0;//锁存段选数据
	delay(5);
//第五位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XEF; //1110 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[sec1/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第六位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XDF; //1101 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[sec1%10];//
	DU = 0;//锁存段选数据
	delay(5);
	}
}

void disp6(year,month,day) //显示日期
	{
//第一位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[year/10];//
	DU = 0;//锁存段选数据
	delay(5);
  //第二位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFD; //1111 1101
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[year%10];//
	DU = 0;//锁存段选数据
	delay(5);
	//第三位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFB; //1111 1011
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[month/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第四位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XF7; //1111 0111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[month%10];//
	DU = 0;//锁存段选数据
	delay(5);
//第五位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XEF; //1110 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[day/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第六位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XDF; //1101 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[day%10];//
	DU = 0;//锁存段选数据
	delay(5);
	}

		void disp7(hour2,min2,sec2)   //秒表显示
	{
//第一位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[hour2/10];//
	DU = 0;//锁存段选数据
	delay(5);
  //第二位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFD; //1111 1101
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[hour2%10];//
	DU = 0;//锁存段选数据
	delay(5);
	//第三位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFB; //1111 1011
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[min2/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第四位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XF7; //1111 0111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[min2%10];//
	DU = 0;//锁存段选数据
	delay(5);
//第五位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XEF; //1110 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data[sec2/10];//
	DU = 0;//锁存段选数据
	delay(5);
		//第六位数码管  		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XDF; //1101 1111
	WE = 0;//锁存位选数据
		
	DU = 1;//打开段选锁存器
	P0 = Data1[sec2%10];//
	DU = 0;//锁存段选数据
	delay(5);
	}

	void key_cl()  //key1处理
	{
		if(Key1==0)
		{
			delay(5);
			if(Key1==0)  //时间清0
			{
			TR0=0;
			num=0;
			sec=0;
			TL0=(65536-50000)%256;
			TH0=(65536-50000)/256;
			flag++;
			if(flag==3) //按三次后回到正常显时
			{
				flag=0;
			}
		}
	   		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
		fmq();
		while(Key1==0);
	}
		if(flag==1)  //按一次，调整时钟
		{
			if(Key2==0)
			{
				delay(5);
				if(Key2==0)
				{
					hour++;
					if(hour==25)
					{hour=0;}
				}
				   		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
				fmq();
				while(Key2==0);
			}
			if(Key3==0)
			{
				delay(5);
				if(Key3==0)
				{
					hour--;
					if(hour==-1)
					{hour=23;}
				}
				   		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
				fmq();
				while(Key3==0);
			}
		}
		if(flag==2) //按两下，调分钟
		{
			if(Key2==0)
			{
				delay(5);
				if(Key2==0)
				{
					min++;
					if(min==60)
					{min=0;}
				}
				   		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
				fmq();
				while(Key2==0);
			}
			if(Key3==0)
			{
				delay(5);
				if(Key3==0)
				{
					min--;
					if(min==-1)
					{min=59;}
				}
				   		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
				fmq();
				while(Key3==0);
			}
		}
	}
	
	
	void key_cl1() //key4处理
	{
		if(Key4==0)
		{
			delay(5);
			if(Key4==0)
			{
				flag_nao_z++;
				if(flag_nao_z==4)
					{
						flag_nao_z=0;
					}
				}
		   		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
		fmq();
		while(Key4==0);
	}
		if(flag_nao_z==2) //按两下调小时
		{
			if(Key2==0)
			{
				delay(5);
				if(Key2==0)
				{
					hour1++;
					if(hour1==24)
					{hour1=0;}
				}
				   		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
				fmq();
				while(Key2==0);
			}
			if(Key3==0)
			{
				delay(5);
				if(Key3==0)
				{
					hour1--;
					if(hour1==-1)
					{hour1=23;}
				}
				   		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
				fmq();
				while(Key3==0);
			}
		}
		if(flag_nao_z==3) //按三下调分钟
		{
			if(Key2==0)
			{
				delay(5);
				if(Key2==0)
				{
					min1++;
					if(min1==61)
					{
						min1=0;
					}
					
				}
			   		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
				fmq();
				while(Key2==0);
			}
			if(Key3==0)
			{
				delay(5);
				if(Key3==0)
				{
					min1--;
					if(min1==-1)
					{min1=59;}
				}
				   		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
				fmq();
				while(Key3==0);
			}
		}
		
	}
	
	
	
	
	
	void key_cl2() //key5,key6,key7,key8处理
	{
		if(Key5==0)
		{
			delay(5);
			if(Key5==0)
			{
				nao_z=~nao_z;
				}
		   		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
		fmq();
		while(Key5==0);
	}
		
			if(Key6==0)
			{
				delay(5);
				if(Key6==0)
				{
					bao_shi=~bao_shi;
				
				   		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
				fmq();
				}
				
			if(bao_shi==1)
			{
				LED3=0;
			}
			else
				{
					LED3=1;
				}
				while(Key6==0);
			}
			if(Key7==0)
		{
			delay(5);
			if(Key7==0)
			{
				ri_qi=~ri_qi;
				}
		fmq();
		while(Key7==0);
	}
		if(Key8==0)
		{
			delay(5);
			if(Key8==0)
			{
				miao_biao++;
				}
		fmq();
		while(Key8==0);
	}
		}
	
		
		void SMG_disp()  //正常显时模式
		{
			if(flag==0)
			{
				disp(hour,min,sec);
			}
			if(flag==1)
			{
				disp1(hour,min,sec);
			}
			if(flag==2)
			{
					disp2(hour,min,sec);
			}
		}
		
		void SMG_disp1() //闹钟模式
		{
			if(flag_nao_z==1)
			{
				disp3(hour1,min1,sec1);
			}
			if(flag_nao_z==2)
			{
				disp4(hour1,min1,sec1);
			}
			if(flag_nao_z==3)
			{
				disp5(hour1,min1,sec1);
			}
			
		}
		
		
		void bao_shi_cl() //整点报时打开时
		{
			if(bao_shi==1)
			{
				if(TR0==1)
				{
					if(min==0&&sec==0)
					{
						   		
	P0 = 0XFF;//清除断码
	WE = 1;//打开位选锁存器
	P0 = 0XFE; //1111 1110
	WE = 0;//锁存位选数据
						fmq();
						while(sec==0);
					}
				}
			}
		}
		
		void ri_qi_cl()     //日期显示模式
		{
			if(ri_qi==1)
			{
				disp6(year,month,day);
			}
		}
		
		
		
		void miao_biao_cl()
		{
			if(miao_biao==3)
			{
				miao_biao=0;
			}
			if(miao_biao==2)
			{
				disp7(hour2,min2,sec2);
				if(sec2>=1)
				{
					TH0=(65536-50000)/256;
		      TL0=(65536-50000)%256;
		      num++;
		      if(num>=20)        //设定1s
					{
						num=0;
						sec2--;
					}
				}
				if(min2>0&&sec2==0)
					{
						min2--;
						sec2=60;
					}
					if(min2<=0&&sec2==0)
					{
						if(hour2>0)
						{
							hour2--;
							min2=60;
						}
						else
						{
							Speak=~Speak;
							
						}
					
							
					}
				}
			if(miao_biao==1)
			{
			hour2=0,min2=0,sec2=20;
				disp7(hour2,min2,sec2);
			}
		}

		
					
							
			
						
			
		
		void main()
		{
			Time0_init();       //定时器0初始化
			while(1)
			{
				key_cl2();       // 整点报时开关
				bao_shi_cl();    //整点报时处理
				if(miao_biao==0)
				{
				if(ri_qi==0)
				{
				 if(flag_nao_z==0) //闹钟显示模式为0
				 {
					if(flag==0) //显示标志位为0
					{
						TR0=1;   //启动定时器
						key_cl1();  //key4处理
					}
					else //显示标志位不为0
					{
						TR0=0;
						num=0;
						TL0=(65536-50000)%256;
						TH0=(65536-50000)/256;
					}
					SMG_disp();
					key_cl();
				}
				else  //闹钟模式不为0
				{
					SMG_disp1();
					key_cl1();
				}
			}
				else
				{
					ri_qi_cl();
				}
			}
				else
				{
					miao_biao_cl();
				}
	}
}
	
				
	
